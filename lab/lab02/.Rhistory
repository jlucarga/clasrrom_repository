barplot(expenses,names.arg=c("phone","transportation","groceries","gym","rent","other"))
?sort
barplot(sort(expenses,names.arg=c("phone","transportation","groceries","gym","rent","other"), decreasing = TRUE)
barplot(sort(expenses,names.arg=c("phone","transportation","groceries","gym","rent","other"), decreasing = TRUE))
barplot(sort(expenses,names.arg=c("phone","transportation","groceries","gym","rent","other"),decreasing = TRUE))
barplot(sort((expenses,names.arg=c("phone","transportation","groceries","gym","rent","other")),decreasing = TRUE)
barplot(expenses)
barplot(sort(expenses,),decreasing = TRUE)
barplot(sort(expenses,))
barplot(sort(expenses,)names.arg=c("phone","transportation","groceries","gym","rent","other"))
barplot(sort(expenses)names.arg=c("phone","transportation","groceries","gym","rent","other"))
barplot(sort(expenses).names.arg=c("phone","transportation","groceries","gym","rent","other"))
barplot(sort(expenses)
barplot(sort(expenses))
barplot(sort(expenses,))
barplot(sort(expenses,decreasing = TRUE))
barplot(sort(expenses,decreasing = TRUE),names.arg=c("phone","transportation","groceries","gym","rent","other"))
names.arg=c("phone","transportation","groceries","gym","rent","other")
names
help("sort")
help(sort)
?sort
??order
??decreasing
??sor
??absolute
3*x^2 +4*x +8
#year expenses
year <- 10
year_expenses <- total_expenses*year
year_expenses
abs(-4)
sqrt(9)
log(2)
# My vector expenses
expenses<-c(phone,transportation,groceries,gym,rent,other)
barplot(expenses)
barplot(sort(expenses,decreasing = TRUE),names.arg=c("phone","transportation","groceries","gym","rent","other"))
# finding the hypothenus of a right triangle
a <- 3
b <- 4
hypothenus <- sqrt(a^2+b^2)
hypothenus
# probability of getting 2 heads of fair coin tossed 5 times
n <- 5
k <- 2
p <- 1/2
choose(n,k)
#binomial formnula using factorial
(factorial(5)/factorial(2))*(1/2)^5
#using choose
choose(n,k)*(1/2)^5
#fair die 10 times. what the prop of exactly getting 3 sixes?
choose(10,3)*(1/6)^10
#using stat::binomial
??binomial
dbinom(2,5,(1/2))
dbinom(2,5,.35)
dbinom(4,5,.35)+dbinom(5,5,.35)
#install.packages(c("stringr", "RColorBrewer","XML"))
library("stringr")
library("RColorBrewer")
library("XML")
#calculate after downloding packages
x <- 2
3*x^2 +4*x +8
x <- -3:3
3*x^2 +4*x +8
rm(list=ls())
rm(list=ls())
load("~/.RData")
getwd()
rm(list())
ls()
object.size()
load('.RData')
load('nba2017-salary-points.RData')
ls()
class(player)
class(team)
class(player)
class(team)
class(position)
class(salary)
class(age)
class(points1)
class(points)
class(points2)
class(rdata)
class(points3)
class(experience)
#typeof()  type of storage of any object
#str() displays the structure of an object in a compact way
#mode() gives the data type (as used in R)
#object.size() gives an estimate of the memory space used by an object
#length() gives the length (i.e. number of elements)
#head() take a peek at the first elements
#tail() take a peek at the last elements
#summary() shows a summary of a given object
length(player)
length(team)
length(position)
length(salary)
#Does all the objects has the same length?
#Yes, all the objects has the same length!
head(player)
head(team)
head(position)
head(salary)
#Are there missing values like NA?
#No, that I can see from this four values
tail(player)
tail(team)
tail(position)
tail(salary)
#how do you know if any of the loaded objects s a vector?
#using is.vector()
typeof(player)
typeof(team)
typeof(position)
typeof(salary)
typeof(age)
typeof(points1)
typeof(points)
typeof(points2)
typeof(rdata)
typeof(points3)
typeof(experience)
summarypeof(player)
summary(team)
summary(position)
summary(salary)
summary(age)
summary(points1)
summary(points)
summary(points2)
summary(rdata)
summary(points3)
summary(experience)
is.vector(player)
is.vector(team)
is.vector(position)
is.vector(salary)
is.vector(age)
is.vector(points1)
is.vector(points)
is.vector(points2)
is.vector(rdata)
is.vector(points3)
is.vector(experience)
four<-head(player, n=4)
four
four[1] #first in the vector
four[0] #the type of the vector
four[-2] #the vector, excluding the itrem 2
four[-c(1,2,3)] # the vector, ecluding the items 1,2,3
four[5] #because the vectors length is 4, this will give you an error
four[c(1,2,2,3,3,3)] #repeated items in the vector
# third element (four times)
player[rep(3, 4)]
# Subset the first four players:
four <- player[1:4]
four
player[seq(from=2, to = length(player), by=2)] # the even items in player- for odds start at item 1
player[seq(from=10, to = 40, by=10)]#elemnts  10,20,30,40
player[seq(from=5, to = length(player), by=5)] #elements multiples of 5
rev(player[seq(from=2, to = length(player), by=2)]) #even items in rev order
#> greater than
#>= greater than or equal
#< less than
#<= less than or equal
#== equal
#!= different
a <- c(2, 4, 6, 7, 8, 10)
a>6
a!=6
a[a>6]
a[a!=6]
scored_four <- scored[1:4]
scored_four[scored_four > 100]
scored_four[scored_four!=10]
#TRUE Statements
TRUE & TRUE
TRUE & FALSE
FALSE & FALSE
# OR Statements
TRUE | TRUE
TRUE | FALSE
FALSE | FALSE
#Not Statements
!TRUE
!FALSE
player[team == 'GSW'] #all true player elements where team is GSW
player[salary>2000000] #players with salaries greater than 2 m
player[scored>1000 & points>1200]#players with scores between 1000 and 1200
player[which.max(salary)]#player with the highest salary
player[which.min(salary)]
salary[which.max(points)]
player[which.max(scored)]
player[position== 'C' & team== "GSW"]
names(player)
player[(position %in% c("SG","PG")) & team== 'LAL']
player[which.max(points3)]
team[which.max(scored)]
warriors_player <- player[team=='GSW']
warriors_player
warriors_salary <- salary[team=="GSW"]
warriors_salary
warriors_points <- scored[team=="GSW"]
warriors_points
names(warriors_salary) <- warriors_player
warriors_salary['Kevin Durant']
warriors_salary[c("Stephen Curry", "Kevin Durant")]
scored
salary
plot('scored','salary') #display an error message - run this to read the error message
log(scored)
log(salary)
plot(scored,salary)
log_scored <- log(scored)
log_salary <- log(salary)
plot(log_scored, log_salary)
plot(log_scored, log_salary)
text(log_scored, log_salary, labels = abbreviate(player))
salary_millions<-c(salary/100000)
salary_millions
da<- c(points1+points2+points3)
da %in%(points)
is.factor(team)
is.factor(position)
class(position)
position_fact<-factor(position)
position_fact
position
position_fact[1:5]
table(position_fact)
position_fact[team=="GSW"]
position_fact[salary_millions>15]
table(position_fact[salary_millions>15])
#count frequency
prop.table(table(position))
prop.table(table(team[position_fact=="SG"]))
plot(scored,salary)
plot(score,salary)
ls()
ls()
load("~/.RData")
nba2017.salary.points <- read.table("~/nba2017-salary-points.RData", quote="\"")
View(nba2017.salary.points)
unnamed.chunk.11_f1c13c6b9b4facfc034655ecd3a41b0a <- read.table("~/Documents/stat 133/lab/warmups/0_warmup1_cache/html/unnamed-chunk-11_f1c13c6b9b4facfc034655ecd3a41b0a.RData", quote="\"")
View(unnamed.chunk.11_f1c13c6b9b4facfc034655ecd3a41b0a)
scored_four <- scored[1:4]
load('nba2018-salary-points.RData')
load('nba2018-salary-points.RData')
load('nba2018-salary-points.RData')
load('.RData')
load('nba2017-salary-points.RData')
ls()
class(age)
a
da
load('nba2017-salary-points.RData')
load(load('nba2018-salary-points.RData'))
load(load('nba2018-salary-points.RData'))
rdata <- "https://github.com/ucb-stat133/stat133-fall-2018/raw/master/data/nba2018-salary-points.RData"
download.file(url = rdata, destfile = 'nba2018-salary-points.RData')
load(load('nba2018-salary-points.RData'))
load('nba2018-salary-points.RData')
getwd()
ls()
setwd(rdata <- "https://github.com/ucb-stat133/stat133-fall-2018/raw/master/data/nba2018-salary-points.RData"
download.file(url = rdata, destfile = 'nba2018-salary-points.RData'))
setwd(rdata <- "https://github.com/ucb-stat133/stat133-fall-2018/raw/master/data/nba2018-salary-points.RData"
download.file(url = rdata, destfile = 'nba2018-salary-points.RData'))
download.file(url = rdata, destfile = 'nba2018-salary-points.RData')
rdata <- "https://github.com/ucb-stat133/stat133-fall-2018/raw/master/data/nba2018-salary-points.RData"
> download.file(url = rdata, destfile = 'nba2018-salary-points.RData')
download.file(url = rdata, destfile = 'nba2018-salary-points.RData')
setwd(:)
ls()
..
ls()
setwd(../)
getwd()
setwd(..?)
setwd(../)
setwd('..')
getwd()
setwd('..')
getwd()
setwd('..')
getwd()
setwd('Documents')
getwd()
setwd('..')
getwd()
getwd()
setwd(/Users/Documents/stat133/lab/lab02)
setwd('/Users/Documents/stat133/lab/lab02')
setwd("icloud Drive")
setwd("icloudDrive")
getwd()
setwd('~/Documents/stat133')
setwd('~/Documents/stat133')
setwd("`/lab/lab02")
setwd('~/Documents/stat133/lab/lab02')
getwd()
setwd('~/Documents/stat133/lab/lab02/lab02-Jose-Lucar.Rmd')
rdata <- "https://github.com/ucb-stat133/stat133-fall-2018/raw/master/data/nba2018-salary-points.RData"
download.file(url = rdata, destfile = 'nba2018-salary-points.RData')
load('nba2018-salary-points.RData')
knitr::opts_chunk$set(echo = TRUE)
load('.RData')
load('.RData')
ls()
rdata <- "https://github.com/ucb-stat133/stat133-fall-2018/raw/master/data/nba2018-salary-points.RData"
download.file(url = rdata, destfile = 'nba2018-salary-points.RData')---
title: "lab02-Jose-Lucar.Rmd"
author: "Jose Lucar"
date: "9/8/2018"
output: html_document
```{r}
#ls()
load('nba2018-salary-points.RData')
#remove existing objects: it goes in the console
#rm(list = ls())
#current directory?
# getwd()
#gives you the class of the object
#find out about the class of som eobjects:
class(player)
class(team)
class(position)
class(salary)
class(age)
class(points1)
class(points)
class(points2)
class(rdata)
class(points3)
#class(experience)
#typeof()  type of storage of any object
#str() displays the structure of an object in a compact way
#mode() gives the data type (as used in R)
#object.size() gives an estimate of the memory space used by an object
#length() gives the length (i.e. number of elements)
#head() take a peek at the first elements
#tail() take a peek at the last elements
#summary() shows a summary of a given object
length(player)
length(team)
length(position)
length(salary)
#Does all the objects has the same length?
#Yes, all the objects has the same length!
head(player)
head(team)
head(position)
head(salary)
#Are there missing values like NA?
#No, that I can see from this four values
tail(player)
tail(team)
tail(position)
tail(salary)
#how do you know if any of the loaded objects s a vector?
#using is.vector()
typeof(player)
typeof(team)
typeof(position)
typeof(salary)
typeof(age)
typeof(points1)
typeof(points)
typeof(points2)
typeof(rdata)
typeof(points3)
typeof(experience)
summary(player)
summary(team)
summary(position)
summary(salary)
summary(age)
summary(points1)
summary(points)
summary(points2)
summary(rdata)
summary(points3)
summary(experience)
is.vector(player)
is.vector(team)
is.vector(position)
is.vector(salary)
is.vector(age)
is.vector(points1)
is.vector(points)
is.vector(points2)
is.vector(rdata)
is.vector(points3)
is.vector(experience)
four<-head(player, n=4)
four
four[1] #first in the vector
four[0] #the type of the vector
four[-2] #the vector, excluding the itrem 2
four[-c(1,2,3)] # the vector, ecluding the items 1,2,3
four[5] #because the vectors length is 4, this will give you an error
four[c(1,2,2,3,3,3)] #repeated items in the vector
# third element (four times)
player[rep(3, 4)]
# Subset the first four players:
four <- player[1:4]
four
player[seq(from=2, to = length(player), by=2)] # the even items in player- for odds start at item 1
player[seq(from=10, to = 40, by=10)]#elemnts  10,20,30,40
player[seq(from=5, to = length(player), by=5)] #elements multiples of 5
rev(player[seq(from=2, to = length(player), by=2)]) #even items in rev order
#> greater than
#>= greater than or equal
#< less than
#<= less than or equal
#== equal
#!= different
a <- c(2, 4, 6, 7, 8, 10)
a>6
a!=6
a[a>6]
a[a!=6]
scored_four <- scored[1:4]
#scored_four[scored_four > 100]
#scored_four[scored_four!=10]
#TRUE Statements
TRUE & TRUE
TRUE & FALSE
FALSE & FALSE
# OR Statements
TRUE | TRUE
TRUE | FALSE
FALSE | FALSE
#Not Statements
!TRUE
!FALSE
player[team == 'GSW'] #all true player elements where team is GSW
player[salary>2000000] #players with salaries greater than 2 m
#player[scored>1000 & points>1200]#players with scores between 1000 and 1200
player[which.max(salary)]#player with the highest salary
player[which.min(salary)]
salary[which.max(points)]
#player[which.max(scored)]
player[position== 'C' & team== "GSW"]
names(player)
player[(position %in% c("SG","PG")) & team== 'LAL']
player[which.max(points3)]
#team[which.max(scored)]
warriors_player <- player[team=='GSW']
warriors_player
warriors_salary <- salary[team=="GSW"]
warriors_salary
#warriors_points <- scored[team=="GSW"]
warriors_points
names(warriors_salary) <- warriors_player
warriors_salary['Kevin Durant']
warriors_salary[c("Stephen Curry", "Kevin Durant")]
scored
salary
plot('scored','salary') #display an error message - run this to read the error message
#log(scored)
log(salary)
#plot(scored,salary)
#log_scored <- log(scored)
log_salary <- log(salary)
#plot(log_scored, log_salary)
#plot(log_scored, log_salary)
#text(log_scored, log_salary, labels = abbreviate(player))
salary_millions<-c(salary/100000)
salary_millions
da<- c(points1+points2+points3)
da %in%(points)
is.factor(team)
is.factor(position)
class(position)
position_fact<-factor(position)
position_fact
position
position_fact[1:5]
table(position_fact)
position_fact[team=="GSW"]
position_fact[salary_millions>15]
table(position_fact[salary_millions>15])
#count frequency
prop.table(table(position))
prop.table(table(team[position_fact=="SG"]))
load('nba2018-salary-points.RData')
```
da<- c(points1+points2+points3)
da %in%(points)
log_scored <- log(scored)
log_salary <- log(salary)
plot(log_scored, log_salary)
plot(log_scored, log_salary)
text(log_scored, log_salary, labels = abbreviate(player))
salary_millions<-c(salary/100000)
salary_millions
da<- c(points1+points2+points3)
da %in%(points)
help(%in%)
help(%in%)
da<- c(points1+points2+points3)
da %in%(x,points)
rm(list())
ls()
rm(list = ls())
